<?php

/**
 * Implements hook_theme().
 */
function phenix_custom_block_theme($existing, $type, $theme, $path)
{
    return [
        'my_account_block' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'my-account-block'
        ],
        'my_group' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'my-group-block'
        ],
        'home_ask_question' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'home-ask-question-block'
        ],
        'home_my_meetings' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'home-meetings-block'
        ],
        'phenix_custom_block_custom_last_doc' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-custom-last-doc'
        ]
    ];
}

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements the form builder.
 */
function phenix_custom_block_form_builder(array &$form, FormStateInterface $form_state) {
  $form['dropdown'] = [
    '#type' => 'select',
    '#title' => 'Select an option',
    '#options' => [
      'option1' => 'Option 1',
      'option2' => 'Option 2',
      'option3' => 'Option 3',
    ],
  ];

  return $form;
}

/**
 * Implements the form display.
 */
function phenix_custom_block_form_display(array &$form, FormStateInterface $form_state) {
    $output = [];
  
    $output['form'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['my-form-container'],
      ],
    ];
  
    $output['form']['dropdown'] = $form['dropdown'];
  
    return $output;
}

/**
 * Implements hook_preprocess_page().
 */
function phenix_custom_block_preprocess_page(&$variables)
{
  $variables['#attached']['library'][] = 'phenix_custom_block/phenix_custom_block';
}



/**
 * Implements hook_preprocess_views_view_field
 * Modifie l'affichage d'un champ dans une vue
 */
function phenix_custom_block_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
	$field = $variables['field'];
	$requests = \Drupal::request();
	$row = $variables['row'];
	
	if ($view->storage->id() == 'home_caroussel' &&  $view->current_display == 'block_1') {
    if ($field->field == 'field_slide') {
      $field_slide = $field->getValue($row);

    }

  }
	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_2') {
		if ($field->field == 'title') {

			$title = $field->getValue($row);
			$start_date = $row->civicrm_event_civicrm_participant_start_date;
			// Create a DateTime object from the date string
			 $dateTime = new DateTime($start_date);
			
			// Get the day
			$day = $dateTime->format('d');

			// Get the month
 			$month = $dateTime->format('m');
			// Obtient le mois en français
			setlocale(LC_TIME, 'fr_FR.utf8');
			$month = strftime('%B', $dateTime->getTimestamp());

			// Get the year
			$year = $dateTime->format('Y');
			
			// Get the hour
			$hour = $dateTime->format('H');

      // Get the minute value.
      $minute = $dateTime->format('i');

			// $formatted = implode(' ',str_split($value, 2));
			$html = '<div class="my-meeting">
					<div class="start-date-meet">
						<span class="meet-day">' . $day . '</span>
						<span class="meet-month">' . $month . ' ' . $year . '</span>
						<span class="meet-hour">' . $hour . ':' . $minute . '</span>
				</div>
				<div class="title-meeting"><p class="title-meet">' . $title .  ' </p></div>
			</div>';
			$html = ['#markup' =>  $html]; 
			$variables['output'] = $html;
		}
	}
}


use Drupal\Core\Menu\MenuLinkTreeInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function phenix_custom_block_preprocess_menu(&$variables) {
  $menu_name = 'account';
  $depth = 3;

  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree */
  $menuLinkTree = \Drupal::service('menu.link_tree');
  $parameters = new MenuTreeParameters();
  $parameters->setMaxDepth($depth);
  $tree = $menuLinkTree->load($menu_name, $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menuLinkTree->transform($tree, $manipulators);
  $menu_tree = $menuLinkTree->build($tree);

  $menu_items = [];

  // Get the current path.
$currentPath = \Drupal::service('path.current')->getPath();

if ($currentPath == '/node/96') {
  
  foreach ($menu_tree as $item) {
    if (isset($item['user.page'])) {

    }
    // $menu_items[] = $item->link->getTitle();
  }
  $menu_items[] = 'Communication';
  $menu_items[] = 'Demande d\'accès';
  $menu_items[] = 'Deconnecter test';
  
}
  $variables['menu_items'] = $menu_items;
}


use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\file\Entity\File;


  /**
 * Implements hook_preprocess_HOOK() for taxonomy term templates.
 */
function phenix_custom_block_preprocess_taxonomy_term(&$variables) {
  // Alter the term page variables here.
  if( $variables['theme_hook_original'] == 'taxonomy_term' && $variables['elements']['#view_mode'] == 'full') {

    $field_dosssier = $variables['elements']['field_dossier'];
    $date_changed = $variables['elements']['#taxonomy_term']->get('changed')->getValue();

    $formatted_date = '';
    if ($date_changed) {
      if( $date_changed[0]['value']) {

        $date_format = 'Y-m-d';
        $formatted_date = date($date_format, $date_changed[0]['value']);
        
        $variables['content']['field_dossier'][0]['#suffix'] = '<div class="date-doc">' . $formatted_date . '</p>';
        $documents = $variables['content']['field_dossier'];

        $all_documents = [];
        foreach ($documents as $index => $value) {
          if (is_numeric($index)) {
            $title_doc = $value['#paragraph'] ? $value['#paragraph']->get('field_titre')->getValue()[0]['value'] : '';  //maybe need a condition if existe
            $id_document = $value['#paragraph'] ? $value['#paragraph']->get('field_document')->getValue() : '';  //maybe need a condition if existe


            if (!$id_document) {

              $taxonomyTerm = \Drupal::routeMatch()->getParameter('taxonomy_term');
              $curr_term_id = $taxonomyTerm->id();
              $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

              // Load your term.
              // $term_id = 123; // Replace with the actual term ID.
              $term = $taxonomy_term_storage->load($curr_term_id);

              // Now you can get the children using $this->taxonomyTermStorage->getChildren($term).
              $child_terms = $taxonomy_term_storage->getChildren($term);

            }



            //s'il n'y a pas de documents on redirige vers le 1er enfant 
            $id_document = array_column($id_document, 'target_id');
           if(!$id_document) continue;
            //load file 
             $paragraph_id = $value['#paragraph']->id();
             $files = File::loadMultiple($id_document);
             $all_info = [];
             foreach ($files as $file) {
                $media = Drupal\media\Entity\Media::load($file->id());
                // $media_extrait = getNodeFieldValue ($media, 'field_extrait');  //TODO ce champ n'existe plus à remplacer par RESUME
                $fileId = $file->id();
                if ($file) {
                  $file_created_at = getNodeFieldValue ($file, 'created');
                  $created_at = date('d m Y', $file_created_at);
                }

                $get_description_by_id = \Drupal::database()->query('select * from  media__field_media_document where entity_id = ' . $fileId)->fetch()->field_media_document_description;
                $size_of_file = filesize('/var/aegir/platforms/civicrm-d9/' . $file->createFileUrl());
                
                $all_documents[$title_doc][] = [
                  'fileType' => $file->getMimeType(),
                  'fileurl' => $file->createFileUrl(),
                  'size' => round($size_of_file / 1024, 2),
                  'fileId' => $file->id(),
                  // 'extrait' => $media_extrait,//TODO ce champ n'existe plus à remplacer par RESUME
                  'description' => $get_description_by_id,
                  'created_at' => $created_at,
                  'paragraph_id' => $paragraph_id,
                ];
             }
              

            // $all_documents[$title_doc] = array_column($id_document, 'target_id');
          }
        } 

        $get_first_element = reset($all_documents);
        $first_title = array_keys($all_documents)[0];
        $first_element_id = $get_first_element[0]['fileId'];
        $media = Drupal\media\Entity\Media::load($first_element_id);
        if ($media) {
          $media_extrait = getNodeFieldValue ($media, 'field_resume');
          $title = getNodeFieldValue ($media, 'name');
        }
        $file_type = $get_first_element[0]['fileType'] == 'application/pdf' ? 'pdf-3.png' : 'pdf-2.png';//todo mettre switch et ajouter tous les types de fichiers
        $file_size = $get_first_element[0]['size'];

        // // Get the file size in bytes
        $file_size_bytes = filesize('/var/aegir/platforms/civicrm-d9/' . $get_first_element[0]['fileurl']);

        // // Convert the size to a human-readable format
         $file_size_readable = round($file_size_bytes / 1024, 2);
        $date_doc = $get_first_element[0]['created_at'];
        $date_doc = str_replace(' ', '.', $date_doc);
        $html = ['#markup' => $media_extrait];
        $html = \Drupal::service('renderer')->render($html);
        unset($all_documents[$first_title][0]);
        $counted_doc = count(reset($all_documents));
        $display_see_other_doc = ($counted_doc > 1);
        
        $variables['content'] = [
          '#theme' => 'phenix_custom_block_custom_last_doc',
          '#cache' => ['max-age' => 0],
          '#content' => [
            'data' => $all_documents,
            'first_element' => $get_first_element,
            'first_title' => $first_title,
            'resume' => $media_extrait,
            'file_type' => $file_type,
            'file_size' => $file_size_readable/* $file_size */,
            'date_doc' => $date_doc,
            'first_element_id' => $first_element_id,
            'first_element_title' => $title,
            'display_see_other_doc' => $display_see_other_doc,
          ]
        ]; 



        
      }
    }

  }
  
}

// Function to format bytes into a human-readable size (KB, MB, GB, etc.)
function formatBytes($bytes, $precision = 2) {
  $units = array('B', 'KB', 'MB', 'GB', 'TB');

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);

  // Uncomment the line below if you want to display the size in whole numbers
  // $precision = ($pow == 0) ? 0 : $precision;

  $bytes /= (1 << (10 * $pow));

  return round($bytes, $precision) . ' ' . $units[$pow];
}


function getNodeFieldValue ($node, $field) {
  $value = '';
  $getValue = $node->get($field)->getValue();
  if (!empty($getValue)) {
    if (isset($getValue[0]['target_id'])) { //For entity reference (img / taxonomy ...)
      $value = $getValue[0]['target_id'];
    }elseif (isset($getValue[0]['value']))  { //For simple text / date
      $value = $getValue[0]['value'];
    }else if(isset($getValue[0]['uri'])) {
      $value = $getValue[0]['uri'];
    }else { //other type of field

    }
  }
  return $value;
}


// Implements hook_form_alter().
function phenix_custom_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  //Page d'authentification
  if ($form['#form_id'] == 'user_login_form') {
    $form['pass']['#title_display'] = 'invisible';
    $form['pass']['#placeholder'] = t('Mot de passe');
    $form['name']['#title_display'] = 'invisible';
    $form['name']['#placeholder'] = 'Identifiant';
    $form['name']['#attributes']['placeholder'] = 'Identifiant';
  }
  
  if (in_array($form['#id'], ['media-document-add-form', 'media-document-edit-form'])) {
    $form['status']['#prefix'] = '<div class="wrapper-status-and-author">';
    $form['author']['#suffix'] = '</div>';
    $form['field_type_de_document']['#prefix'] = '<div class="wrapper-doc-type">';
    $form['field_source']['#suffix'] = '</div>';
    $form['field_source']['widget']['#description'] = '';
    $form['field_filieres']['widget'][0]['value']['#group'] = 'first';


    /** Debut config filière */
    $menu_tree_service = \Drupal::service('menu.link_tree');
		$menu_parameters = new \Drupal\Core\Menu\MenuTreeParameters();
		$menu_parameters->setMaxDepth(1); // Profondeur du menu à afficher
		$menu_name = 'guide'; // Nom machine du menu à afficher
		$menuLoaded = $menu_tree_service->load($menu_name, $menu_parameters);

		foreach($menuLoaded as $key => $eachMenu) {
		  //Skip for menu 'Condition general and disabled menu
		  if (!$eachMenu->link->isEnabled() || ($eachMenu->link->getPluginId() == 'menu_link_content:f2ea2bf5-f176-4a63-83ba-4904c0312619')) {
			unset($menuLoaded[$key]);
		  }
		}

    \Drupal::service('civicrm')->initialize();
		$optionValues = \Civi\Api4\OptionValue::get(FALSE)
			->addSelect('id', 'label')
			->addWhere('option_group_id', '=', 163)
			->execute();

		$option = [];
		foreach ($optionValues as $key => $filiere) {
		  $option[$filiere['id']] = $filiere['label'];
		}
		asort($option);
		$form['filiere'] = [
      '#type' => 'container',
      'widget' => [
        '#type' => 'checkboxes',
        '#options' => $option,
        '#title' => 'Filières',
        '#attributes' => ['class' => ['all-menu-checkboxes']]
      ],
      '#weight' => 6,
      '#group' => 'first',
	  ];
	  $form['filieres']['#group'] = 'first';
		$form['field_menu']['#attributes']['class'][] = 'hide hidden';  
    /** fin config filiere */


    $form['author']['#type'] = 'container';
    $form['author']['#group'] = 'first';
    $form['revision']['#group'] = 'second';
    $form['revision_information']['#group'] = 'second';
    $form['field_filieres']['widget']['#group'] = 'first';
    $form['actions']['submit']['#group'] = 'first';
    $form['revision_information']['#attributes']['class'][] = 'hidden';
    $form['revision_log_message']['#attributes']['class'][] = 'hidden';
    $form['field_extrait']['#attributes']['class'][] = 'hidden';

    //get option form 
    $all_option = $form['field_tags']['widget']['#options'];


    // $current_description = $form['field_media_document']['widget'][0]['#description'];
    // // Use regular expression to match the desired part and truncate the text
    // if (preg_match('/^.*Limite à 80 Mo\./', $current_description, $matches)) {
    //   $truncatedText = $matches[0];
    //   // Output the truncated text
      
    // }
    
    $form['field_media_document']['widget'][0]['#description'] = '1 seul fichier.Limité à 80 Mo';
    $form['field_groupes']['#prefix'] = convertToNestedULWithCheckboxes($all_option);
    
    $curr_description = $form['field_media_document']['widget'][0]['#description'];
    $curr_description = str_replace('<br />', '', $curr_description);
    $form['field_media_document']['widget'][0]['#description'] = $curr_description;
    
    $all_files_type_validator = $form['field_media_document']['widget'][0]['#upload_validators']['file_validate_extensions'][0];
    $words = str_word_count($all_files_type_validator, 1);
    // Take only the first 30 words
    $truncatedText = implode(' ', array_slice($words, 0, 7)) . '...';
    $form['field_groupes']['widget']['#description'] = '<a class="delete-all">Supprimer tout</a>';
    // $form['field_media_document']['#suffix'] = '<div class="custom-placeholder-overlay">' . $truncatedText . '</div>';
  }
}


/**
 * Convert a flat array into a nested array with UL/LI structure based on levels.
 *
 * @param array $items
 *   The flat array of items with levels indicated by '-'.
 * @return string
 *   The nested UL/LI structure.
 */
function convertToNestedULWithCheckboxes($items) {
  $result = '<div class="all-tag-dropdown"><p class="p-tag-arborescence"><strong>Tags et arborescence</strong></p><ul class="custom-tag-dropdown">';
  $indentations = [0];

  foreach ($items as $id => $item) {
    $indentation = 0;
    while (substr($item, 0, 1) === '-') {
      $indentation++;
      $item = substr($item, 1);
    }

    while ($indentation < end($indentations)) {
      $result .= "</li></ul>";
      array_pop($indentations);
    }

    if ($indentation > end($indentations)) {
      $result .= "<ul>";
      array_push($indentations, $indentation);
    } else {
      $result .= "</li>";
    }
    $itemText = trim(str_replace('-', '', $item));
    $result .= '<li data-current-id="' . $id . '">
    <span class="fancytree-node fancytree-expanded fancytree-has-children fancytree-exp-e fancytree-ico-e">
    <span class="fancytree-expander"></span>
    <span class="fancytree-checkbox"></span>
      <span class="fancytree-title">' . $itemText . '</span></span>';
  }

  $result .= str_repeat("</li></ul>", count($indentations) - 1) . "</li></ul></div>";

  return $result;
}