<?php




use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Menu\MenuLinkTreeInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function phenix_custom_block_theme($existing, $type, $theme, $path)
{
    return [
        'my_account_block' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'my-account-block'
        ],
        'my_group' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'my-group-block'
        ],
        'home_ask_question' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'home-ask-question-block'
        ],
        'home_my_meetings' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'home-meetings-block'
        ],
        'phenix_custom_block_custom_last_doc' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-custom-last-doc'
        ],
        'phenix_custom_block_last_doc_automatique' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-custom-last-doc-lie'
        ],
        'phenix_custom_block_custom_texte_image' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-custom-texte-image'
        ],
        'phenix_custom_block_last_doc_txt_img' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-last-doc-txt-img'
        ],
        'list_participant' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-list-participant'
        ],
        'detail_group' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-detail-group'
        ],
        'doc_detail_group' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-document-group'
        ],
        'phenix_custom_block_alter_view_detail_commission_reunion' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'alter-view-detail-commission-reunion'
        ],
        'phenix_custom_bloc_search' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search'
        ],
        'phenix_custom_bloc_search_node' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-node'
        ],
        'phenix_custom_bloc_search_term' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-term'
        ],
        'phenix_custom_bloc_search_media_video' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-media-video'
        ],
        'meeting_detail' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'meeting-detail'
        ],
        'document_detail_meet' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'document-detail-meet'
        ],
        'page_list_meeting' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'page-list-meeting'
        ],
        'phenix_custom_bloc_search_civicrm_meeting' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-civicrm-meeting'
        ]
    ];
}

/**
 * Implements hook_entity_view().
 */
function phenix_custom_block_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  // Check if the entity type is 'civicrm_event'.
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  // Get the current request object.
  $request = \Drupal::request();

  // Get the path of the current request.
  $current_path = $request->getPathInfo();

  // Check if the path contains "/civicrm-group/".
  if (strpos($current_path, '/civicrm-group/') !== false) {
    if ($entity->getEntityTypeId() == 'media') {
      // unset($build[''])
      $build['field_media_document'][0]['#attributes']['class'][] = 'to-hide-doc';
      $build['#attributes']['class'][] = 'to-hide-doc';
    }
  }

    if ($entity->getEntityTypeId() === 'civicrm_group' and $view_mode === 'full') {
  //  unset($build['#civicrm_group']->getFieldDefinitions()['field_documents_groupe']); 
      $build['#attributes']['class'][] = 'group-detail-page';
    }
  if ($entity->getEntityTypeId() === 'civicrm_event') {
    // Modify the node view for the 'full' view mode.
    if ($view_mode === 'full') {
      // Add a custom field to the entity view.
      unset($build['max_participants']);

      // Get the current user object.
      $current_user = \Drupal::currentUser();
      // Check if the user is authenticated (logged in).
      if ($current_user->isAuthenticated()) {
        // Get the email address of the current user.
        $email = $current_user->getEmail();
        // You can now use $email for further processing.
        $cid = $custom_service->getContactIdByEmail($email);
        $event_id = \Drupal::request()->attributes->get('civicrm_event')->get('id')->getValue()[0]['value'];
        $participant_id = \Civi\Api4\Participant::get()
        ->addSelect('id')
        ->addWhere('contact_id', '=', $cid)
        ->addWhere('event_id', '=', $event_id)
        ->execute()->first()['id'];

        $build['custom_179']['#prefix'] = '<div class="meeting-page"><i class="icon-custom-calendar custom-icon-meeting"></i></div>';
        $build['description']['#prefix'] = '<div class="meeting-confirm-my-presence">
        
        <a href="/civicrm-participant/' . $participant_id . '/edit" class="button js-form-submit form-submit">Je confirme ma pr√©sence</a>
        </div>'
        ;
        // $ex = '<a href="#" class="button js-form-submit form-submit">Excuser</a>';
      }
    }
  }
}


/**
 * Implements the form builder.
 */
function phenix_custom_block_form_builder(array &$form, FormStateInterface $form_state) {
  $form['dropdown'] = [
    '#type' => 'select',
    '#title' => 'Select an option',
    '#options' => [
      'option1' => 'Option 1',
      'option2' => 'Option 2',
      'option3' => 'Option 3',
    ],
  ];

  return $form;
}

/**
 * Implements the form display.
 */
function phenix_custom_block_form_display(array &$form, FormStateInterface $form_state) {
    $output = [];
  
    $output['form'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['my-form-container'],
      ],
    ];
  
    $output['form']['dropdown'] = $form['dropdown'];
  
    return $output;
}

/**
 * Implements hook_preprocess_page().
 */
function phenix_custom_block_preprocess_page(&$variables)
{
  $variables['#attached']['library'][] = 'phenix_custom_block/phenix_custom_block';
}



/**
 * Implements hook_preprocess_views_view_field
 * Modifie l'affichage d'un champ dans une vue
 */
function phenix_custom_block_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
	$field = $variables['field'];
	$requests = \Drupal::request();
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
	$row = $variables['row'];
	
	if ($view->storage->id() == 'home_caroussel' &&  $view->current_display == 'block_1') {
    if ($field->field == 'field_slide') {
      $field_slide = $field->getValue($row);
      
    }
    
  }
  
  
  if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_7') {
    // $custom_service->customizeMeetingList()
    if ($field->field == 'title') {
      $title = $field->getValue($row);
      
      $date = $row->created_id_civicrm_contact_start_date;
      $dateArray = $custom_service->formatDateWithMonthInLetterAndHours($date);

      $variables['output'] = [
        '#theme' => 'page_list_meeting',
        '#cache' => ['max-age' => 0],
        '#content' => [
          'meeting_info' => $dateArray,
          'title' => $title,
        ],
      ];
    }
  }


	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_5') {
    if ($field->field == 'frontend_title') {
      // $formatted = implode(' ',str_split($value, 2));
      $title = $field->getValue($row);
      $default_title = $title ? $title : $row->civicrm_group_civicrm_group_contact_title;
      $group_id = $row->civicrm_group_civicrm_group_contact_id_1;
			$html = '<div class="my-meeting">
      <a href="/civicrm-group/' . $group_id . '">' . $default_title . '</a>
      </div>';
      $html = ['#markup' =>  $html]; 
      $variables['output'] = $html;
    }
  }

	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_2') {
		if ($field->field == 'title') {

			$title = $field->getValue($row);
			$start_date = $row->civicrm_event_civicrm_participant_start_date;
			// Create a DateTime object from the date string
			 $dateTime = new DateTime($start_date);
			
			// Get the day
			$day = $dateTime->format('d');

			// Get the month
 			$month = $dateTime->format('m');
			// Obtient le mois en fran√ßais
			setlocale(LC_TIME, 'fr_FR.utf8');
			$month = strftime('%B', $dateTime->getTimestamp());

			// Get the year
			$year = $dateTime->format('Y');
			
			// Get the hour
			$hour = $dateTime->format('H');

      // Get the minute value.
      $minute = $dateTime->format('i');

			// $formatted = implode(' ',str_split($value, 2));
			$html = '<div class="my-meeting">
					<div class="start-date-meet">
						<span class="meet-day">' . $day . '</span>
						<span class="meet-month">' . $month . ' ' . $year . '</span>
						<span class="meet-hour">' . $hour . ':' . $minute . '</span>
				</div>
				<div class="title-meeting"><p class="title-meet">' . $title .  ' </p></div>
			</div>';
			$html = ['#markup' =>  $html]; 
			$variables['output'] = $html;
		}
	}

  //Page detail commissions / groupe
  if ($view->storage->id() == 'civi_groupe_evenements' /* && $view->current_display == 'block_1' */) {
    $custom_service = \Drupal::service('phenix_custom_block.view_services');
    $custom_service->customizeViewReunionOfTheCommissionPage($variables);

    
  }

  if ($view->storage->id() == 'rechercher') {
    $entity = $variables['row']->_entity;
    
    if ($entity instanceof  \Drupal\media\Entity\Media) {
      $custom_service->customResultSearchDoc ($variables);
    }
    
    if ($field->field == 'thumbnail') {
      $custom_service->customResultThumbnail($variables);
    }

    if ($entity instanceof  \Drupal\node\Entity\Node) {
      $custom_service->customResultSearchNode($variables);
    }
    
    if ($entity instanceof  Drupal\taxonomy\Entity\Term) {
      $custom_service->customResultSearchTerm($variables);
    }    
    if ($entity instanceof  Drupal\civicrm_entity\Entity\CivicrmEntity) {
      $custom_service->customResultSearchMeeting($variables);
    }
  }
  
  if ($view->storage->id() == 'civi_groupe_evenements' && (in_array($view->current_display, ['page_4', 'page_2']))) {
    $id = $custom_service->getNodeFieldValue($row->_entity, 'id');
    if ($field->field == 'title') {
      $group_id = $view->args[0];
      $variables['output'] = ['#markup' => '<a href="/civicrm-event/' . $id . '"> ' . $field->getValue($row) . '</a>'];
    }
  }
}


/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function phenix_custom_block_preprocess_menu(&$variables) {
  $menu_name = 'account';
  $depth = 3;

  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree */
  $menuLinkTree = \Drupal::service('menu.link_tree');
  $parameters = new MenuTreeParameters();
  $parameters->setMaxDepth($depth);
  $tree = $menuLinkTree->load($menu_name, $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menuLinkTree->transform($tree, $manipulators);
  $menu_tree = $menuLinkTree->build($tree);

  $menu_items = [];

  // Get the current path.
  $currentPath = \Drupal::service('path.current')->getPath();

  if ($currentPath == '/node/96') {
    
    foreach ($menu_tree as $item) {
      if (isset($item['user.page'])) {

      }
      // $menu_items[] = $item->link->getTitle();
    }
    $menu_items[] = 'Communication';
    $menu_items[] = 'Demande d\'acc√®s';
    $menu_items[] = 'Deconnecter test';
    
  }
  $variables['menu_items'] = $menu_items;
}


  /**
 * Implements hook_preprocess_HOOK() for taxonomy term templates.
 */
function phenix_custom_block_preprocess_taxonomy_term(&$variables) {
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  // Load the current node or entity.
  $db = \Drupal::database();

  $term_object = $variables['elements']['#taxonomy_term'];
  $term_object_id = $custom_service->getNodeFieldValue($term_object, 'tid');

  // Alter the term page variables here.
  $term = $variables['elements']['#taxonomy_term'];
  if( $variables['theme_hook_original'] == 'taxonomy_term' && $variables['elements']['#view_mode'] == 'full') {
    
    //check si la page de term en question est li√© a une vue ou pas (en se servant du champ field_taxonomy_views_integrator_)
    //Donc √ßa va √™tre les gabarits textes + images
    if ($term->get('field_taxonomy_views_integrator_')->getValue()) {
      $datas = $custom_service->allDataTxtImg($variables);
      $variables['content'] = [
        '#theme' => 'phenix_custom_block_custom_texte_image',
        '#cache' => ['max-age' => 0],
        '#content' => [
          'data' => $datas
        ]
      ];  
      
    }else {
      
      /**** Affichage dans la page dernier doc les doc li√© au terme TODO Comment differencier les terme li√© a un doc ET terme qui a des doc****/
      if ($term->id() == '4992') {  //TODO CECI PERMET D'AFFICHER LES DOCUMENT LIE AUX TERMES
        return $custom_service->getAllDataForDocumentLieAuxTermeFirstElement($variables);
      }
      /***** end *****/
      
      /**** Affichage dans la page dernier doc ****/
      $field_dosssier = $variables['elements']['field_dossier'];
      $date_changed = $variables['elements']['#taxonomy_term']->get('changed')->getValue();

      $formatted_date = '';
      if ($date_changed) {
        if( $date_changed[0]['value']) {

          $date_format = 'Y-m-d';
          $formatted_date = date($date_format, $date_changed[0]['value']);
          
          $variables['content']['field_dossier'][0]['#suffix'] = '<div class="date-doc">' . $formatted_date . '</p>';
          $documents = $variables['content']['field_dossier'];

          $all_documents = [];
          foreach ($documents as $index => $value) {
            if (is_numeric($index)) {
              $title_doc = $value['#paragraph'] ? ($value['#paragraph']->hasField('field_titre') ? $value['#paragraph']->get('field_titre')->getValue()[0]['value'] : '') : '';  //maybe need a condition if existe
              $id_document = $value['#paragraph'] ? ($value['#paragraph']->hasField('field_document') ? $value['#paragraph']->get('field_document')->getValue() : '') : '';  //maybe need a condition if existe


              if (!$id_document) {

                $taxonomyTerm = \Drupal::routeMatch()->getParameter('taxonomy_term');
                $curr_term_id = $taxonomyTerm->id();
                $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

                // Load your term.
                // $term_id = 123; // Replace with the actual term ID.
                $term = $taxonomy_term_storage->load($curr_term_id);

                // Now you can get the children using $this->taxonomyTermStorage->getChildren($term).
                $child_terms = $taxonomy_term_storage->getChildren($term);

              }


              //s'il n'y a pas de documents on redirige vers le 1er enfant 
              $id_document = array_column($id_document, 'target_id');
            if(!$id_document) continue;
              //load file 
              $paragraph_id = $value['#paragraph']->id();
              $files = File::loadMultiple($id_document);
              $all_info = [];
              foreach ($files as $file) {
                  $media = Drupal\media\Entity\Media::load($file->id());
                  $fileId = $file->id();
                  if ($file) {
                    $file_created_at = getNodeFieldValue ($file, 'created');
                    $created_at = date('d m Y', $file_created_at);
                  }

                  $get_description_by_id = \Drupal::database()->query('select * from  media__field_media_document where entity_id = ' . $fileId)->fetch()->field_media_document_description;
                  $size_of_file = filesize('/var/aegir/platforms/civicrm-d9/' . $file->createFileUrl());
                  $media_name = getNodeFieldValue($media, 'field_titre_public') ? getNodeFieldValue($media, 'field_titre_public') : getNodeFieldValue($media, 'name');
                  //todo find link

                  //recupere le type de document 
                  $type_doc = $custom_service->getTypeDocument ($media);

                  $all_documents[$title_doc][] = [
                    'fileType' => $file->getMimeType(),
                    'fileurl' => $file->createFileUrl(),
                    'size' => round($size_of_file / 1024, 2),
                    'fileId' => $file->id(),
                    'type_document' => $type_doc,
                    'description' => $media_name,
                    'created_at' => $created_at,
                    'paragraph_id' => $paragraph_id,
                  ];
              }
                

              // $all_documents[$title_doc] = array_column($id_document, 'target_id');
            }
          } 

          $get_first_element = reset($all_documents);
          $first_title = array_keys($all_documents)[0];
          $first_element_id = $get_first_element[0]['fileId'];
          $media = Drupal\media\Entity\Media::load($first_element_id);
          if ($media) {
            $media_extrait = getNodeFieldValue ($media, 'field_resume');
            $title = getNodeFieldValue($media, 'field_titre_public') ? getNodeFieldValue($media, 'field_titre_public') : getNodeFieldValue($media, 'name');
          }
          $file_type = $custom_service->getFileTypeExtension($get_first_element[0]['fileType']);//todo mettre switch et ajouter tous les types de fichiers
          $file_size = $get_first_element[0]['size'];

          // // Get the file size in bytes
          $file_size_bytes = filesize('/var/aegir/platforms/civicrm-d9/' . $get_first_element[0]['fileurl']);

          // // Convert the size to a human-readable format
          $file_size_readable = round($file_size_bytes / 1024, 2);
          $date_doc = $get_first_element[0]['created_at'];
          $date_doc = str_replace(' ', '.', $date_doc);
          $html = ['#markup' => $media_extrait];
          $html = \Drupal::service('renderer')->render($html);
          unset($all_documents[$first_title][0]);

          $counted_doc = count(reset($all_documents));
          // $display_see_other_doc = ($counted_doc > 1); TODO 
          $display_see_other_doc = ($all_documents > 2);
          $variables['content'] = [
            '#theme' => 'phenix_custom_block_custom_last_doc',
            '#cache' => ['max-age' => 0],
            '#content' => [
              'data' => $all_documents,
              'first_element' => $get_first_element,
              'first_title' => $first_title,
              'first_type_de_document' => $custom_service->getTypeDocument ($media),
              'resume' => $media_extrait,
              'file_type' => $file_type,
              'file_size' => $file_size_readable/* $file_size */,
              'date_doc' => $date_doc,
              'first_element_id' => $first_element_id,
              'first_element_title' => $title,
              'display_see_other_doc' => $display_see_other_doc,
              'is_page_last_doc' => true
            ]
          ]; 
        }
      }
    }

  }
  
}

// Function to format bytes into a human-readable size (KB, MB, GB, etc.)
function formatBytes($bytes, $precision = 2) {
  $units = array('B', 'KB', 'MB', 'GB', 'TB');

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);

  // Uncomment the line below if you want to display the size in whole numbers
  // $precision = ($pow == 0) ? 0 : $precision;

  $bytes /= (1 << (10 * $pow));

  return round($bytes, $precision) . ' ' . $units[$pow];
}


function getNodeFieldValue ($node, $field) {
  $value = '';
  $getValue = $node->get($field)->getValue();
  if (!empty($getValue)) {
    if (isset($getValue[0]['target_id'])) { //For entity reference (img / taxonomy ...)
      $value = $getValue[0]['target_id'];
    }elseif (isset($getValue[0]['value']))  { //For simple text / date
      $value = $getValue[0]['value'];
    }else if(isset($getValue[0]['uri'])) {
      $value = $getValue[0]['uri'];
    }else { //other type of field

    }
  }
  return $value;
}


// Implements hook_form_alter().
function phenix_custom_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  //Page mot de passe oubli√©
  if ($form['#form_id'] == 'user_pass') {
    $form['actions']['#prefix'] = '<div class="btn-custom-submit">';
    $form['actions']['#suffix'] = '</div>';
    $form['actions']['submit']['#value'] = '';
  }
  
  //Page d'authentification
  if ($form['#form_id'] == 'user_login_form') {
    $form['pass']['#title_display'] = 'invisible';
    $form['pass']['#placeholder'] = t('Mot de passe');
    $form['name']['#title_display'] = 'invisible';
    $form['name']['#placeholder'] = 'Identifiant';
    $form['name']['#attributes']['placeholder'] = 'Identifiant';
  }
  
  if (in_array($form['#id'], ['media-document-add-form', 'media-document-edit-form'])) {

    $form['name']['widget'][0]['value']['#title'] = 'Nom (titre interne)';
    $form['#attributes']['class'][] = 'custom-add-and-edit-form';
    $form['status']['#prefix'] = '<div class="wrapper-status-and-author">';
    $form['author']['#suffix'] = '</div>';
    $form['field_type_de_document']['#prefix'] = '<div class="wrapper-doc-type">';
    $form['field_source']['#suffix'] = '</div>';
    $form['field_source']['widget']['#description'] = '';
    $form['field_filieres']['widget'][0]['value']['#group'] = 'first';


    /** Debut config fili√®re */
    $menu_tree_service = \Drupal::service('menu.link_tree');
		$menu_parameters = new \Drupal\Core\Menu\MenuTreeParameters();
		$menu_parameters->setMaxDepth(1); // Profondeur du menu √† afficher
		$menu_name = 'guide'; // Nom machine du menu √† afficher
		$menuLoaded = $menu_tree_service->load($menu_name, $menu_parameters);

		foreach($menuLoaded as $key => $eachMenu) {
		  //Skip for menu 'Condition general and disabled menu
		  if (!$eachMenu->link->isEnabled() || ($eachMenu->link->getPluginId() == 'menu_link_content:f2ea2bf5-f176-4a63-83ba-4904c0312619')) {
			unset($menuLoaded[$key]);
		  }
		}

    \Drupal::service('civicrm')->initialize();
		$optionValues = \Civi\Api4\OptionValue::get(FALSE)
			->addSelect('id', 'label')
			->addWhere('option_group_id', '=', 163)
			->execute();

		$option = [];
		foreach ($optionValues as $key => $filiere) {
		  $option[$filiere['id']] = $filiere['label'];
		}
		asort($option);
		$form['filiere'] = [
      '#type' => 'container',
      'widget' => [
        '#type' => 'checkboxes',
        '#options' => $option,
        '#title' => 'Fili√®res',
        '#attributes' => ['class' => ['all-menu-checkboxes']]
      ],
      '#weight' => 6,
      '#group' => 'first',
	  ];
	  $form['filieres']['#group'] = 'first';
		$form['field_menu']['#attributes']['class'][] = 'hide hidden';  
    /** fin config filiere */


    $form['author']['#type'] = 'container';
    $form['author']['#group'] = 'first';
    $form['revision']['#group'] = 'second';
    $form['revision_information']['#group'] = 'second';
    $form['field_filieres']['widget']['#group'] = 'first';
    $form['actions']['submit']['#group'] = 'first';
    $form['revision_information']['#attributes']['class'][] = 'hidden';
    $form['revision_log_message']['#attributes']['class'][] = 'hidden';
    $form['field_extrait']['#attributes']['class'][] = 'hidden';

    //get option form 
    $all_option = $form['field_tags']['widget']['#options'];

    
    $form['field_media_document']['widget'][0]['#description'] = '<span class="only-one-file">1 seul fichier </span> | <span class="size-limit">Max 80 Mo</span>';
    $default_value_tags = $form['field_tags']['widget']['#default_value'];
    $form['field_groupes']['#prefix'] = convertToNestedULWithCheckboxes($all_option, $default_value_tags);
    
    $curr_description = $form['field_media_document']['widget'][0]['#description'];
    $curr_description = str_replace('<br />', '', $curr_description);
    $form['field_media_document']['widget'][0]['#description'] = $curr_description;
    
    $form['field_groupes']['widget']['#description'] = '<a class="delete-all">Supprimer tout</a>';
    $form['actions']['submit']['#prefix'] = '<div class="div-parent-save">';
    $form['actions']['submit']['#suffix'] = '<i class="fas fa-save fa-inverse"></i></div>';
    if ($form['#id'] == 'media-document-edit-form') {
      $form['actions']['delete']['#prefix'] = '<div class="div-parent-delete">';
      $form['actions']['delete']['#suffix'] = '<i class="fas fa-trash-alt"></i></div>';
    }


    $default_value_tags = $form['field_tags']['widget']['#default_value'];
    $default_value_tags= implode(',', $default_value_tags);
    $form['field_tags']['#attributes']['data-default-value'] = $default_value_tags;


  }

  if ($form['#form_id'] == 'taxonomy_term_rubrique_form') {
    
  }
 
}

/**
 * Implements hook_taxonomy_term_presave().
 */
function phenix_custom_block_taxonomy_term_presave(\Drupal\taxonomy\TermInterface $term) {
  // Check if the custom field value is present in the submitted form values.
  if ($value = \Drupal::request()->request->get('test_field')) {
    // Save the custom field value to the term.
    $term->test_field->value = $value;
  }
}


/**
 * Convert a flat array into a nested array with UL/LI structure based on levels.
 *
 * @param array $items
 *   The flat array of items with levels indicated by '-'.
 * @return string
 *   The nested UL/LI structure.
 */
function convertToNestedULWithCheckboxes($items, $default_value) {
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  $result = '<div class="all-tag-dropdown"><p class="p-tag-arborescence"><strong>Tags / Arborescence</strong></p><ul class="custom-tag-dropdown">';
  $indentations = [0];
  unset($items['4966']);//ne pas afficher le checkbox pour accueil
  // unset($items['6273']);//ne pas afficher le checkbox pour "les fili√®res"
  foreach ($items as $id => $item) {
    $indentation = 0;
    while (substr($item, 0, 1) === '-') {
      $indentation++;
      $item = substr($item, 1);
    }
    while ($indentation < end($indentations)) {
      $result .= "</li></ul>";
      array_pop($indentations);
    }
    
    if ($indentation > end($indentations)) {
      $result .= "<ul>";
      array_push($indentations, $indentation);
    } else {
      $result .= "</li>";
    }
    $itemText = trim(str_replace('-', '', $item));
    $checked = in_array($id, $default_value) ? ' checked' : '';
    //check if term has children
    $class_has_child = $custom_service->hasChildren($id) || $custom_service->isRubriqueWithTxtAndImg($id) ? ' term-who-had-child' : ' term-don-t-have-child';
    $result .= '<li class="ifhas ' . $class_has_child . '" data-current-id="' . $id . '">
    <span class="fancytree-node fancytree-expanded fancytree-has-children fancytree-exp-e fancytree-ico-e">
    <span class="fancytree-expander"></span>
    <span class="fancytree-checkbox ' . $checked . '"></span>
    <span class="fancytree-title">' . $itemText . '</span></span>';
  }
  
  $result .= str_repeat("</li></ul>", count($indentations) - 1) . "</li></ul></div>";
  
  return $result;
}


use Drupal\views\Plugin\views\area\Text;

/**
 * Implements hook_views_pre_render().
 * Permet d'ajouter du lien  en bas de la vue s'il y a plus de 3 r√©unions 
 */
function phenix_custom_block_views_pre_render(\Drupal\views\ViewExecutable $view) {
  // Check if the view is the one you want to target.
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  if ($view->id() == 'civi_groupe_evenements') {
    $group_id = $view->args[0];
    
    if ( $view->current_display != 'page_4') {
      if ($view->footer['area']) {
        if (count($view->result) > 2) {
          $view->footer['area']->options['content']['value'] = "<a href='/toutes-les-reunions-a-venir/" . $group_id . "' class='link-to-meeting-page'>Voir + </a>";
        }
      }
    }
    if(in_array($view->current_display, ['page_4', 'page_2'])) {
      $view->footer['area']->options['content']['value'] = "<a href='/civicrm-group/" . $group_id . "' class='link-to-meeting-page'>‚á† Retour vers la page du groupe</a>";
    }
  } 
  if ($view->id() == 'civi_groupe_membres') {
    $view->build_info['title'] = '<p class="test">R√©f√©rents</div>';
  }
}



/**
 * Implements hook_preprocess_views_view().
 */
function phenix_custom_block_preprocess_views_view(array &$variables) {
  // Check if the view is the one you want to target.
  $view = $variables['view'];
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  $field = $variables['field'];
  $requests = \Drupal::request();
  $row = $variables['row'];
  
  $custom_service->addTitleToViewSearch($variables);


  if ($variables['view']->id() == 'civi_groupe_evenements') {
    $variables['attached_markup'] = '<div class="custom-markup">Your custom markup goes here.</div>';
    // Add classes and IDs to the main view container.
    $variables['attributes']['class'][] = 'civi_groupe_evenements_class';
  }

  /* if ($variables['view']->id() == 'rechercher') {
    $field = $field->field;
    $variables['view']->result[0]->_entity
  } */
  
}
