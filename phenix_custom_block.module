<?php

/**
 * Implements hook_theme().
 */
function phenix_custom_block_theme($existing, $type, $theme, $path)
{
    return [
        'my_account_block' => [
            'variables' => [
            'content' => Null,
            ],
            'render element' => 'children',
            'path' => $path . '/templates',
            'template' => 'my-account-block'
          ], 'phenix_custom_block_custom_last_doc' => [
            'variables' => [
            'content' => Null,
            ],
            'render element' => 'children',
            'path' => $path . '/templates',
            'template' => 'phenix-custom-block-custom-last-doc'
        ]
    ];
}

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements the form builder.
 */
function phenix_custom_block_form_builder(array &$form, FormStateInterface $form_state) {
  $form['dropdown'] = [
    '#type' => 'select',
    '#title' => 'Select an option',
    '#options' => [
      'option1' => 'Option 1',
      'option2' => 'Option 2',
      'option3' => 'Option 3',
    ],
  ];

  return $form;
}

/**
 * Implements the form display.
 */
function phenix_custom_block_form_display(array &$form, FormStateInterface $form_state) {
    $output = [];
  
    $output['form'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['my-form-container'],
      ],
    ];
  
    $output['form']['dropdown'] = $form['dropdown'];
  
    return $output;
}



/**
 * Implements hook_preprocess_views_view_field
 * Modifie l'affichage d'un champ dans une vue
 */
function phenix_custom_block_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
	$field = $variables['field'];
	$requests = \Drupal::request();
	$row = $variables['row'];
	
	if ($view->storage->id() == 'home_caroussel' &&  $view->current_display == 'block_1') {
    if ($field->field == 'field_slide') {
      $field_slide = $field->getValue($row);
      
    }

  }
	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_2') {
		if ($field->field == 'title') {

			$title = $field->getValue($row);
			$start_date = $row->civicrm_event_civicrm_participant_start_date;
     // dump($row);
			// Create a DateTime object from the date string
			 $dateTime = new DateTime($start_date);
			
			// Get the day
			$day = $dateTime->format('d');

			// Get the month
 			$month = $dateTime->format('m');
			// Obtient le mois en français
			setlocale(LC_TIME, 'fr_FR.utf8');
			$month = strftime('%B', $dateTime->getTimestamp());

			// Get the year
			$year = $dateTime->format('Y');
			
			// Get the hour
			$hour = $dateTime->format('H');

      // Get the minute value.
      $minute = $dateTime->format('i');

			// $formatted = implode(' ',str_split($value, 2));
			$html = '<div class="my-meeting">
					<div class="start-date-meet">
						<span class="meet-day">' . $day . '</span>
						<span class="meet-month">' . $month . ' ' . $year . '</span>
						<span class="meet-hour">' . $hour . ':' . $minute . '</span>
				</div>
				<div class="title-meeting"><p class="title-meet">' . $title .  ' </p></div>
			</div>';
			$html = ['#markup' =>  $html]; 
			$variables['output'] = $html;
		}
	}
}


use Drupal\Core\Menu\MenuLinkTreeInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function phenix_custom_block_preprocess_menu(&$variables) {
  $menu_name = 'account';
  $depth = 3;

  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree */
  $menuLinkTree = \Drupal::service('menu.link_tree');
  $parameters = new MenuTreeParameters();
  $parameters->setMaxDepth($depth);
  $tree = $menuLinkTree->load($menu_name, $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menuLinkTree->transform($tree, $manipulators);
  $menu_tree = $menuLinkTree->build($tree);

  $menu_items = [];

  // Get the current path.
$currentPath = \Drupal::service('path.current')->getPath();

if ($currentPath == '/node/96') {
  
  foreach ($menu_tree as $item) {
    if (isset($item['user.page'])) {
      // dump($item);

    }
    // $menu_items[] = $item->link->getTitle();
  }
  $menu_items[] = 'Communication';
  $menu_items[] = 'Demande d\'accès';
  $menu_items[] = 'Deconnecter test';
  
}
  $variables['menu_items'] = $menu_items;
}


use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\file\Entity\File;


  /**
 * Implements hook_preprocess_HOOK() for taxonomy term templates.
 */
function phenix_custom_block_preprocess_taxonomy_term(&$variables) {
  // Alter the term page variables here.
  if( $variables['theme_hook_original'] == 'taxonomy_term' && $variables['elements']['#view_mode'] == 'full') {

    $field_dosssier = $variables['elements']['field_dossier'];
    $date_changed = $variables['elements']['#taxonomy_term']->get('changed')->getValue();

    $formatted_date = '';
    if ($date_changed) {
      if( $date_changed[0]['value']) {

        $date_format = 'Y-m-d';
        $formatted_date = date($date_format, $date_changed[0]['value']);
        
        $variables['content']['field_dossier'][0]['#suffix'] = '<div class="date-doc">' . $formatted_date . '</p>';
        $documents = $variables['content']['field_dossier'];

        $all_documents = [];
        foreach ($documents as $index => $value) {
          if (is_numeric($index)) {
            $title_doc = $value['#paragraph'] ? $value['#paragraph']->get('field_titre')->getValue()[0]['value'] : '';  //maybe need a condition if existe
            $id_document = $value['#paragraph'] ? $value['#paragraph']->get('field_document')->getValue() : '';  //maybe need a condition if existe
            $id_document = array_column($id_document, 'target_id');
            if(!$id_document) continue;
            //load file 
             $paragraph_id = $value['#paragraph']->id();
             $files = File::loadMultiple($id_document);
             $all_info = [];
             foreach ($files as $file) {
                $media = Drupal\media\Entity\Media::load($file->id());
                // $media_extrait = getNodeFieldValue ($media, 'field_extrait');  //TODO ce champ n'existe plus à remplacer par RESUME
                $fileId = $file->id();
                if ($file) {
                  $file_created_at = getNodeFieldValue ($file, 'created');
                  $created_at = date('d m Y', $file_created_at);
                }

                $get_description_by_id = \Drupal::database()->query('select * from  media__field_media_document where entity_id = ' . $fileId)->fetch()->field_media_document_description;
                $all_documents[$title_doc][] = [
                  'fileType' => $file->getMimeType(),
                  'fileurl' => $file->createFileUrl(),
                  'size' => $file->getSize(),
                  'fileId' => $file->id(),
                  // 'extrait' => $media_extrait,//TODO ce champ n'existe plus à remplacer par RESUME
                  'description' => $get_description_by_id,
                  'created_at' => $created_at,
                  'paragraph_id' => $paragraph_id,
                ];
             }
              

            // $all_documents[$title_doc] = array_column($id_document, 'target_id');
          }
        } 

        $get_first_element = reset($all_documents);
        $first_title = array_keys($all_documents)[0];
        $first_element_id = $get_first_element[0]['fileId'];
        $media = Drupal\media\Entity\Media::load($first_element_id);
        if ($media) {
          $media_extrait = getNodeFieldValue ($media, 'field_resume');
          $title = getNodeFieldValue ($media, 'name');
        }
        $file_type = $get_first_element[0]['fileType'] == 'application/pdf' ? 'pdf-3.png' : 'pdf-2.png';//todo mettre switch et ajouter tous les types de fichiers
        $file_size = $get_first_element[0]['size'];
        $date_doc = $get_first_element[0]['created_at'];
        $date_doc = str_replace(' ', '.', $date_doc);
        $html = ['#markup' => $media_extrait];
        $html = \Drupal::service('renderer')->render($html);

        unset($all_documents[$first_title][0]);

        $variables['content'] = [
          '#theme' => 'phenix_custom_block_custom_last_doc',
          '#cache' => ['max-age' => 0],
          '#content' => [
            'data' => $all_documents,
            'first_element' => $get_first_element,
            'first_title' => $first_title,
            'resume' => $media_extrait,
            'file_type' => $file_type,
            'file_size' => $file_size,
            'date_doc' => $date_doc,
            'first_element_id' => $first_element_id,
            'first_element_title' => $title,
          ]
        ]; 



        
      }
    }

  }
  
}


function getNodeFieldValue ($node, $field) {
  $value = '';
  $getValue = $node->get($field)->getValue();
  if (!empty($getValue)) {
    if (isset($getValue[0]['target_id'])) { //For entity reference (img / taxonomy ...)
      $value = $getValue[0]['target_id'];
    }elseif (isset($getValue[0]['value']))  { //For simple text / date
      $value = $getValue[0]['value'];
    }else if(isset($getValue[0]['uri'])) {
      $value = $getValue[0]['uri'];
    }else { //other type of field

    }
  }
  return $value;
}
