<?php




use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\StreamWrapper\StreamWrapperInterface;
use Drupal\file\Entity\File;
use Drupal\Core\Menu\MenuLinkTreeInterface;
use Drupal\Core\Menu\MenuTreeParameters;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Routing\TrustedRedirectResponse;

/**
 * Implements hook_theme().
 */
function phenix_custom_block_theme($existing, $type, $theme, $path)
{
    return [
        'my_account_block' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'my-account-block'
        ],
        'my_group' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'my-group-block'
        ],
        'home_ask_question' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'home-ask-question-block'
        ],
        'home_my_meetings' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'home-meetings-block'
        ],
        'phenix_custom_block_custom_last_doc' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-custom-last-doc'
        ],
        'phenix_custom_block_last_doc_automatique' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-custom-last-doc-lie'
        ],
        'phenix_custom_block_custom_texte_image' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-custom-texte-image'
        ],
        'phenix_custom_block_last_doc_txt_img' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-last-doc-txt-img'
        ],
        'list_participant' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-list-participant'
        ],
        'detail_group' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-detail-group'
        ],
        'doc_detail_group' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'phenix-custom-block-document-group'
        ],
        'phenix_custom_block_alter_view_detail_commission_reunion' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'alter-view-detail-commission-reunion'
        ],
        'phenix_custom_bloc_search' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search'
        ],
        'phenix_custom_bloc_search_node' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-node'
        ],
        'phenix_custom_bloc_search_term' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-term'
        ],
        'phenix_custom_bloc_search_media_video' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-media-video'
        ],
        'meeting_detail' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'meeting-detail'
        ],
        'document_detail_meet' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'document-detail-meet'
        ],
        'page_list_meeting' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'page-list-meeting'
        ],
        'phenix_custom_bloc_search_civicrm_meeting' => [
          'variables' => [
          'content' => Null,
          ],
          'render element' => 'children',
          'path' => $path . '/templates',
          'template' => 'search-civicrm-meeting'
        ]
    ];
}

/**
 * Implements hook_entity_view().
 */
function phenix_custom_block_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  // Check if the entity type is 'civicrm_event'.
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  // Get the current request object.
  $request = \Drupal::request();

  // Get the path of the current request.
  $current_path = $request->getPathInfo();

  // Check if the path contains "/civicrm-group/".
  if (strpos($current_path, '/civicrm-group/') !== false) {
    if ($entity->getEntityTypeId() == 'media') {
      // unset($build[''])
      $build['field_media_document'][0]['#attributes']['class'][] = 'to-hide-doc';
      $build['#attributes']['class'][] = 'to-hide-doc';
    }
  }
  
  
  // $custom_service->accessRubriqueSocial();
  
  //Rediriger vers 
  if ($entity->getEntityTypeId() == 'taxonomy_term' && $custom_service->getNodeFieldValue($entity, 'vid') == 'rubrique') {
    $tid = $custom_service->getNodeFieldValue($entity, 'tid');
    $hasChildren = $custom_service->hasChildren($tid);
    $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    
   
    //TODO RESTRICTION DOC QUI EST LIE A UN TERME SOCIAL NE DOIT PAS ETRE ACCESSIBLE QUE POUR LE ROLE SOCIAL A VERIFIER 
    $termObj = Term::load($tid);
    $isTermSocial = $custom_service->getNodeFieldValue($termObj, 'field_social');
    if ($termObj &&  $isTermSocial) {
        // Get the current user object.
      $current_user = \Drupal::currentUser();
      // Get an array of role IDs for the current user.
      $user_roles = $current_user->getRoles();
      $allowToEdit = false;
      if (!in_array('administrator', $user_roles) /* || in_array('super_utilisateur', $user_roles) */ && !in_array('social', $user_roles)) {
        $response = new TrustedRedirectResponse('/');
        $response->send();
      }
    }

    if ($hasChildren) {
      
      // Load your term.
      // $term_id = 123; // Replace with the actual term ID.
      $term = $taxonomy_term_storage->load($tid);
      $term_par = $taxonomy_term_storage->load($tid);
      // Now you can get the children using $this->taxonomyTermStorage->getChildren($term).
      $child_terms = $taxonomy_term_storage->getChildren($term);
      
      $level_one_tid = array_key_first($child_terms);
      $hasChildren = $custom_service->hasChildren($level_one_tid);
      if ($hasChildren) {
        $term = $taxonomy_term_storage->load($level_one_tid);
        
        // Now you can get the children using $this->taxonomyTermStorage->getChildren($term).
        $child_terms = $taxonomy_term_storage->getChildren($term);
        //redirection
        $path = reset($child_terms)->toUrl()->toString(); 
        redirectTerm ($term , $term_par);
        
      }else {
        uasort($child_terms, function ($a, $b) {
          return \Drupal::service('phenix_custom_block.view_services')->getNodeFieldValue($a, 'weight') - \Drupal::service('phenix_custom_block.view_services')->getNodeFieldValue($b, 'weight');
        });
        
        $path = reset($child_terms)->toUrl()->toString();
        redirectTerm ($term , $term_par);
        //redirection
      }
    }
  }

  
    if ($entity->getEntityTypeId() === 'civicrm_group' and $view_mode === 'full') {
  //  unset($build['#civicrm_group']->getFieldDefinitions()['field_documents_groupe']); 
      $build['#attributes']['class'][] = 'group-detail-page';
    }
  if ($entity->getEntityTypeId() === 'civicrm_event') {
    // Modify the node view for the 'full' view mode.
    if ($view_mode === 'full') {
      // Add a custom field to the entity view.
      unset($build['max_participants']);

      // Get the current user object.
      $current_user = \Drupal::currentUser();
      // Check if the user is authenticated (logged in).
      if ($current_user->isAuthenticated()) {
        // Get the email address of the current user.
        $email = $current_user->getEmail();
        // You can now use $email for further processing.
        $cid = $custom_service->getContactIdByEmail($email);
        $event_id = \Drupal::request()->attributes->get('civicrm_event')->get('id')->getValue()[0]['value'];
        $participant_id = \Civi\Api4\Participant::get(FALSE)
        ->addSelect('id')
        ->addWhere('contact_id', '=', $cid)
        ->addWhere('event_id', '=', $event_id)
        ->execute()->first()['id'];
        $build['start_date'][0]['#prefix'] = '<div class="date-start-and-end">';
        $build['end_date'][0]['#suffix'] = '</div>';

        $build['title'][0]['#prefix'] = '<div class="title-detail-meeting">';
        $build['title'][0]['#suffix'] = '</div>';
        
        $build['custom_179']['#prefix'] = '<div class="meeting-page"><i class="icon-custom-calendar custom-icon-meeting"></i></div>';
        $build['description']['#prefix'] = '<div class="meeting-confirm-my-presence">
        
        <a href="/civicrm-participant/' . $participant_id . '/edit" class="button js-form-submit form-submit">Je confirme ma présence</a>
        </div>'
        ;
        // $ex = '<a href="#" class="button js-form-submit form-submit">Excuser</a>';
      }
    }
    
    
    //Ne pas afficher l'affichage par defaut des documents
    if (isset($build['_layout_builder'][0]['content'])) {
      foreach($build['_layout_builder'][0]['content'] as $key_layout => $value_layout){
        if (strpos($value_layout['#plugin_id'], 'civicrm_event:civicrm_event:field_documents') !== false) {
            unset($build['_layout_builder'][0]['content'][$key_layout]);
        }
      }
    }
  }
}

function redirectTerm ($term_chil , $term) {
  $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $child_terms = $taxonomy_term_storage->getChildren($term_chil);
  //redirection
  uasort($child_terms, function ($a, $b) {
    return \Drupal::service('phenix_custom_block.view_services')->getNodeFieldValue($a, 'weight') - \Drupal::service('phenix_custom_block.view_services')->getNodeFieldValue($b, 'weight');
  });
  $path = reset($child_terms)->toUrl()->toString(); 
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  $term_parent = Term::load($custom_service->getNodeFieldValue($term, 'parent'));
  if ($term_parent && $custom_service->getNodeFieldValue($term_parent, 'name') == 'Accueil') {
    // Redirect the user to the specified URL.
    $response = new TrustedRedirectResponse($path);
    $response->send();
  }
}

function redirectToFirstChild ($term) {
  $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $child_terms = $taxonomy_term_storage->getChildren($term);
  //redirection
  $path = reset($child_terms)->toUrl()->toString(); 

  $response = new TrustedRedirectResponse($path);
  $response->send();
}


/**
 * Implements the form builder.
 */
function phenix_custom_block_form_builder(array &$form, FormStateInterface $form_state) {
  $form['dropdown'] = [
    '#type' => 'select',
    '#title' => 'Select an option',
    '#options' => [
      'option1' => 'Option 1',
      'option2' => 'Option 2',
      'option3' => 'Option 3',
    ],
  ];

  return $form;
}

/**
 * Implements the form display.
 */
function phenix_custom_block_form_display(array &$form, FormStateInterface $form_state) {
    $output = [];
  
    $output['form'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['my-form-container'],
      ],
    ];
  
    $output['form']['dropdown'] = $form['dropdown'];
  
    return $output;
}

/**
 * Implements hook_preprocess_page().
 */
function phenix_custom_block_preprocess_page(&$variables)
{
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  
  $current_path = \Drupal::service('path.current')->getPath();
  if (strpos($current_path, '/civicrm-group/') !== false) {
    \Drupal::cache()->invalidateAll();

    $custom_service->customizeDetailPageGroupIfUserDoesntBelongToGroup($variables);
  }

  $variables['#attached']['library'][] = 'phenix_custom_block/phenix_custom_block';
}



/**
 * Implements hook_preprocess_views_view_field
 * Modifie l'affichage d'un champ dans une vue
 */
function phenix_custom_block_preprocess_views_view_field(&$variables) {
  
  $view = $variables['view'];
	$field = $variables['field'];
	$requests = \Drupal::request();
  
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
	$row = $variables['row'];
	$current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  $email = $current_user->getEmail();

  
  if ($view->storage->id() == 'media' &&  $view->current_display == 'media_page_list') {
     if ($field->field == 'thumbnail__target_id') {
      $title = $field->getValue($row);
      if ($row->_entity->hasField('field_media_document')) {

        $file = $custom_service->getNodeFieldValue($row->_entity, 'field_media_document');
        $file = \Drupal\file\Entity\File::load($file);
        $filememe = $custom_service->getNodeFieldValue($file, 'filemime');
        $file_type = 'pdf-3.png';
        switch($filememe) {
        case 'application/pdf':
          $file_type = 'pdf-3.png';
          break;
        case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
          $file_type = 'pdf-2.png';
          break;
          case 'application/msword':
          $file_type = 'pdf-2.png';
          break;
          case 'application/rtf':
            $txt_file = '.rtf';
          break;
        case 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
          $file_type = 'pdf.png';
          break;
        case 'application/vnd.ms-excel':
          $file_type = 'pdf.png';
          break;
        }
        
        $variables['output'] = ['#markup' => '<img loading="lazy" src="/files/assets/'. $file_type .'">'];
      }
    } 
  }

  // You can now use $email for further processing.
	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_7') {
    // $variables['view']->header['area']->options['content'] = [];
    if ((!in_array('super_utilisateur', $user_roles) && !in_array('admin_client', $user_roles) && !in_array('permanent', $user_roles) && !in_array('administrator', $user_roles))) {
      $variables['view']->header['area']->options['content']['value'] = '<h2><i class="far fa-calendar-alt"></i> [view:title] </h2>';
    }    
  }
	if ($view->storage->id() == 'home_caroussel' &&  $view->current_display == 'block_1') {
    if ($field->field == 'field_slide') {
      $field_slide = $field->getValue($row);
      
    }
    
  }
  
  
  if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_7') {
    // $custom_service->customizeMeetingList()
    if ($field->field == 'title') {
      $title = $field->getValue($row);
      
      $date = $row->created_id_civicrm_contact_start_date;
      $dateArray = $custom_service->formatDateWithMonthInLetterAndHours($date);

      $variables['output'] = [
        '#theme' => 'page_list_meeting',
        '#cache' => ['max-age' => 0],
        '#content' => [
          'meeting_info' => $dateArray,
          'title' => $title,
        ],
      ];
    }
  }


	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_5') {
    if ($field->field == 'frontend_title') {
      // $formatted = implode(' ',str_split($value, 2));
      $title = $field->getValue($row);
      $default_title = $title ? $title : $row->civicrm_group_civicrm_group_contact_title;
      $group_id = $row->civicrm_group_civicrm_group_contact_id_1;
			$html = '<div class="my-meeting">
      <a href="/civicrm-group/' . $group_id . '">' . $default_title . '</a>
      </div>';
      $html = ['#markup' =>  $html]; 
      $variables['output'] = $html;
    }
  }

	if ($view->storage->id() == 'civievents_base_sur_le_contact_' &&  $view->current_display == 'block_2') {
		if ($field->field == 'title') {

			$title = $field->getValue($row);
			$start_date = $row->civicrm_event_civicrm_participant_start_date;
			// Create a DateTime object from the date string
			 $dateTime = new DateTime($start_date);
			
			// Get the day
			$day = $dateTime->format('d');

			// Get the month
 			$month = $dateTime->format('m');
			// Obtient le mois en français
			setlocale(LC_TIME, 'fr_FR.utf8');
			$month = strftime('%B', $dateTime->getTimestamp());

			// Get the year
			$year = $dateTime->format('Y');
			
			// Get the hour
			$hour = $dateTime->format('H');

      // Get the minute value.
      $minute = $dateTime->format('i');

			// $formatted = implode(' ',str_split($value, 2));
			$html = '<div class="my-meeting">
					<div class="start-date-meet">
						<span class="meet-day">' . $day . '</span>
						<span class="meet-month">' . $month . ' ' . $year . '</span>
						<span class="meet-hour">' . $hour . ':' . $minute . '</span>
				</div>
				<div class="title-meeting"><p class="title-meet">' . $title .  ' </p></div>
			</div>';
			$html = ['#markup' =>  $html]; 
			$variables['output'] = $html;
		}
	}

  //Page detail commissions / groupe
  if ($view->storage->id() == 'civi_groupe_evenements' /* && $view->current_display == 'block_1' */) {
    $custom_service = \Drupal::service('phenix_custom_block.view_services');
    $custom_service->customizeViewReunionOfTheCommissionPage($variables);

    
  }

  if ($view->storage->id() == 'rechercher') {
    $entity = $variables['row']->_entity;
    
    if ($entity instanceof  \Drupal\media\Entity\Media) {
      $custom_service->customResultSearchDoc ($variables);
    }
    
    if ($field->field == 'thumbnail') {
      $custom_service->customResultThumbnail($variables);
    }

    if ($entity instanceof  \Drupal\node\Entity\Node) {
      $custom_service->customResultSearchNode($variables);
    }
    
    if ($entity instanceof  Drupal\taxonomy\Entity\Term) {
      $custom_service->customResultSearchTerm($variables);
    }    
    if ($entity instanceof  Drupal\civicrm_entity\Entity\CivicrmEntity) {
      $custom_service->customResultSearchMeeting($variables);
    }
  }
  
  if ($view->storage->id() == 'civi_groupe_evenements' && (in_array($view->current_display, ['page_4', 'page_2']))) {
    $id = $custom_service->getNodeFieldValue($row->_entity, 'id');
    if ($field->field == 'title') {
      $group_id = $view->args[0];

      $group_name = \Civi\Api4\Group::get(FALSE)
        ->addSelect('title')
        ->addWhere('id', '=', $group_id)
        ->execute()->first()['title'];
        
      $variables['output'] = ['#markup' => '<div class="info-meet-group"><a href="/civicrm-event/' . $id . '"> ' . $field->getValue($row) . '</a>'];
    }
  }
}


/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function phenix_custom_block_preprocess_menu(&$variables) {
  $menu_name = 'account';
  $depth = 3;

  /** @var \Drupal\Core\Menu\MenuLinkTreeInterface $menuLinkTree */
  $menuLinkTree = \Drupal::service('menu.link_tree');
  $parameters = new MenuTreeParameters();
  $parameters->setMaxDepth($depth);
  $tree = $menuLinkTree->load($menu_name, $parameters);
  $manipulators = [
    ['callable' => 'menu.default_tree_manipulators:checkAccess'],
    ['callable' => 'menu.default_tree_manipulators:generateIndexAndSort'],
  ];
  $tree = $menuLinkTree->transform($tree, $manipulators);
  $menu_tree = $menuLinkTree->build($tree);

  $menu_items = [];

  // Get the current path.
  $currentPath = \Drupal::service('path.current')->getPath();

  if ($currentPath == '/node/96') {
    
    foreach ($menu_tree as $item) {
      if (isset($item['user.page'])) {

      }
      // $menu_items[] = $item->link->getTitle();
    }
    $menu_items[] = 'Communication';
    $menu_items[] = 'Demande d\'accès';
    $menu_items[] = 'Deconnecter test';
    
  }
  $variables['menu_items'] = $menu_items;
}


  /**
 * Implements hook_preprocess_HOOK() for taxonomy term templates.
 */
function phenix_custom_block_preprocess_taxonomy_term(&$variables) {
  
  $variables['#cache']['max-age'] = 0;


  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  // Load the current node or entity.
  $db = \Drupal::database();

  $term_object = $variables['elements']['#taxonomy_term'];

  $term_object_id = $custom_service->getNodeFieldValue($term_object, 'tid');
  // Alter the term page variables here.
  $term = $variables['elements']['#taxonomy_term'];
  if( $variables['theme_hook_original'] == 'taxonomy_term' && $variables['elements']['#view_mode'] == 'full') {

    $variables['attributes']['class'][] = 'this-is-taxo-page';//Pour identifier que c'est une page de taxonomie, utile pour le js du menu
    
    //check si la page de term en question est lié a une vue ou pas (en se servant du champ field_taxonomy_views_integrator_)
    //Donc ça va être les gabarits textes + images
    if (getNodeFieldValue($term , 'field_gabarit_texte_et_images')) {
      $datas = $custom_service->allDataTxtImg($variables);
      $variables['content'] = [
        '#theme' => 'phenix_custom_block_custom_texte_image',
        '#cache' => ['max-age' => 0],
        '#content' => [
          'data' => $datas
          ]
        ];  
      
    }else {

       // Get the current user object.
      $current_user = \Drupal::currentUser();
      $user = \Drupal\user\Entity\User::load($current_user->id());

      // Get an array of role IDs for the current user.
      $user_roles = $current_user->getRoles();
      $current_paths = \Drupal::service('path.current')->getPath();


      /**** Affichage dans la page dernier doc les doc lié aux tags (si ce n'est pas vide on retourne sinon on affiche les paragraphes ****/
      if(!empty($custom_service->getAllLinkedDocByTags ($variables))) {
        return $custom_service->getAllDataForDocumentLieAuxTermeFirstElement($variables);
      }

      /***** end *****/

      /**** Affichage dans la page dernier doc (pour les paragraphes) ****/
      $field_dosssier = $variables['elements']['field_dossier'];
      $date_changed = $variables['elements']['#taxonomy_term']->get('changed')->getValue();
      $formatted_date = '';
      
      if ($date_changed) {
        if( $date_changed[0]['value']) {

          $date_format = 'Y-m-d';
          $formatted_date = date($date_format, $date_changed[0]['value']);
          
          // $variables['content']['field_dossier'][0]['#suffix'] = '<div class="date-doc">' . $formatted_date . '</p>';
          $documents = $variables['content']['field_dossier'];

          $all_documents = [];
          
          //S'il n'y a pas de document on return 
          $there_is_no_document = count($documents)  < 4;
          if ($there_is_no_document) {
            if ($custom_service->notAdherentOrSocial()) {
              return $variables['content']['field_dossier'][0]['#suffix'] = '<a class="btn-add-meeting-empty" style="width: fit-content" href="/media/add/document?term_id=' . $term->id() . '"><i class="fa fa-plus-circle"></i>Ajouter un document</a>
              ';
            }
          }
          $firstParagraph = $documents[0]['#paragraph'];
          
          $accroche = $firstParagraph ? $custom_service->getNodeFieldValue($firstParagraph, 'field_texte_formate') : '';
          $contenu = $firstParagraph ? $custom_service->getNodeFieldValue($firstParagraph, 'field_contenu') : '';
          foreach ($documents as $index => $value) {
            if (is_numeric($index)) {
              $title_doc = $value['#paragraph'] ? ($value['#paragraph']->hasField('field_titre') ? $value['#paragraph']->get('field_titre')->getValue()[0]['value'] : '') : '';  //maybe need a condition if existe
              $id_document = $value['#paragraph'] ? ($value['#paragraph']->hasField('field_document') ? $value['#paragraph']->get('field_document')->getValue() : '') : '';  //maybe need a condition if existe
              

              if (!$id_document) {

                $taxonomyTerm = \Drupal::routeMatch()->getParameter('taxonomy_term');
                $curr_term_id = $taxonomyTerm->id();
                $taxonomy_term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');

                // Load your term.
                // $term_id = 123; // Replace with the actual term ID.
                $term = $taxonomy_term_storage->load($curr_term_id);

                // Now you can get the children using $this->taxonomyTermStorage->getChildren($term).
                $child_terms = $taxonomy_term_storage->getChildren($term);

              }


              //s'il n'y a pas de documents on redirige vers le 1er enfant 
              $id_document = array_column($id_document, 'target_id');

              //Trie les id de document par date et check si le terme est social ou pas
              if(!$id_document) continue;
              $is_term_social = $custom_service->getNodeFieldValue($term_object, 'field_social') ? true : false;
              $id_document = $custom_service->sortTermIdByDateCreation($id_document, $is_term_social);
              //load file 
              $paragraph_id = $value['#paragraph']->id();
              
              $current_paragraph = $value['#paragraph'];
              $firstParagraph = $documents[0]['#paragraph'];
              $current_paragraph_accroche = $custom_service->getNodeFieldValue($current_paragraph, 'field_texte_formate');
              $current_paragraph_contenu = $custom_service->getNodeFieldValue($current_paragraph, 'field_contenu');

              $files = File::loadMultiple($id_document);
              $all_info = [];
              foreach ($files as $file) {
                  $media = Drupal\media\Entity\Media::load($file->id());
                  $fileId = $file->id();
                  if ($file) {
                    $file_created_at = getNodeFieldValue ($file, 'created');
                    $created_at = date('d m Y', $file_created_at);
                  }


                  $created_at = $custom_service->convertTimesptamToDate($custom_service->getNodeFieldValue($media, 'created'));

                  $get_description_by_id = \Drupal::database()->query('select * from  media__field_media_document where entity_id = ' . $fileId)->fetch()->field_media_document_description;
                  $size_of_file = filesize('/var/aegir/platforms/civicrm-d9/' . $file->createFileUrl());
                  $media_name = getNodeFieldValue($media, 'field_titre_public') ? getNodeFieldValue($media, 'field_titre_public') : getNodeFieldValue($media, 'name');
                  //todo find link

                  //recupere le type de document 
                  $type_doc = $custom_service->getTypeDocument ($media);
                  
                  $filiere_label = $custom_service->getFiliereLabels($media);

                  $file_id = $custom_service->getNodeFieldValue($media, 'field_media_document');
                  $file0bj = File::load($file_id);
                  $sizz = $custom_service->getFileSize($file0bj);

                  $all_documents[$title_doc][] = [
                    'fileType' => $file->getMimeType(),
                    'fileurl' => $file->createFileUrl(),
                    'size' => $sizz,
                    'fileId' => $file->id(),
                    'type_document' => $type_doc,
                    'description' => $media_name,
                    'created_at' => $created_at,
                    'paragraph_id' => $paragraph_id, 
                    'media_id' => $media->id(), 
                    'filiere' => $filiere_label,
                    'filiere' => $filiere_label,
                  ];

                  $all_documents[$title_doc][0]['current_paragraph_accroche'] = $current_paragraph_accroche;
                  $all_documents[$title_doc][0]['current_paragraph_contenu'] = $current_paragraph_contenu;
              }
                

              // $all_documents[$title_doc] = array_column($id_document, 'target_id');
            }
          } 

          if (!empty($all_documents)) {

            $get_first_element = reset($all_documents);
            $first_title = array_keys($all_documents)[0];
            $first_element_id = $get_first_element[0]['fileId'];
            $media = Drupal\media\Entity\Media::load($first_element_id);
            $file_type = 'application/pdf';//default
            if ($media) {
              $media_extrait = getNodeFieldValue ($media, 'field_resume');
              $title = getNodeFieldValue($media, 'field_titre_public') ? getNodeFieldValue($media, 'field_titre_public') : getNodeFieldValue($media, 'name');
              $first_element_file_id = getNodeFieldValue($media, 'field_media_document');
              $first_file_document = File::load($first_element_file_id);
              $first_file_extension = getNodeFieldValue($first_file_document, 'filemime');
              $file_type = $custom_service->getFileTypeExtension($first_file_extension);
            }
            $file_size = $get_first_element[0]['size'];

            // // Get the file size in bytes
            $file_size_bytes = filesize('/var/aegir/platforms/civicrm-d9/' . $get_first_element[0]['fileurl']);

            // // Convert the size to a human-readable format
            $file_size_readable = round($file_size_bytes / 1024, 2);


            $date_doc = $custom_service->convertTimesptamToDate($custom_service->getNodeFieldValue($media, 'created'));
            $html = ['#markup' => $media_extrait];
            $html = \Drupal::service('renderer')->render($html);
            unset($all_documents[$first_title][0]);
            
            $allowToEdit = $custom_service->checkIfUserCanEditDoc ();
            
            $counted_doc = count(reset($all_documents));

            $file_id = $custom_service->getNodeFieldValue($media, 'field_media_document');
            $file0bj = File::load($file_id);
            $file_size_readable = $custom_service->getFileSize($file0bj);
            // $display_see_other_doc = ($counted_doc > 1); TODO 
            $display_see_other_doc = (count($all_documents) > 1 || count(reset($all_documents)));
            
            $variables['content'] = [
              '#theme' => 'phenix_custom_block_custom_last_doc',
              '#cache' => ['max-age' => 0],
              '#content' => [
                'data' => $all_documents,
                'first_element' => $get_first_element,
                'first_title' => $first_title,
                'first_type_de_document' => $custom_service->getTypeDocument ($media),
                'resume' => $media_extrait,
                'file_type' => $file_type,
                'file_size' => $file_size_readable/* $file_size */,
                'date_doc' => $date_doc,
                'first_element_id' => $first_element_id,
                'first_element_title' => $title,
                'display_see_other_doc' => $display_see_other_doc,
                'is_page_last_doc' => true,
                'can_edit_doc' => $allowToEdit,
                'term_id' => $term_object_id,
                'filiere' => $custom_service->getFiliereLabels($media),
                'accroche' => $accroche,
                'contenu' => $contenu,
                'is_adherent' => $custom_service->isAdherent(),
                'not_adherent_or_social' => $custom_service->notAdherentOrSocial(),
              ]
            ]; 
          }else {
            if ($custom_service->notAdherentOrSocial()) {
              return $variables['content']['field_dossier'][0]['#suffix'] = '<a class="btn-add-meeting-empty" style="width: fit-content" href="/media/add/document?term_id=' . $term->id() . '"><i class="fa fa-plus-circle"></i>Ajouter un document</a>
              ';
            }
          }
        }
      }
    }

  }
  
}

// Function to format bytes into a human-readable size (KB, MB, GB, etc.)
function formatBytes($bytes, $precision = 2) {
  $units = array('B', 'KB', 'MB', 'GB', 'TB');

  $bytes = max($bytes, 0);
  $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
  $pow = min($pow, count($units) - 1);

  // Uncomment the line below if you want to display the size in whole numbers
  // $precision = ($pow == 0) ? 0 : $precision;

  $bytes /= (1 << (10 * $pow));

  return round($bytes, $precision) . ' ' . $units[$pow];
}


function getNodeFieldValue ($node, $field) {
  $value = '';
  $getValue = $node->get($field)->getValue();
  if (!empty($getValue)) {
    if (isset($getValue[0]['target_id'])) { //For entity reference (img / taxonomy ...)
      $value = $getValue[0]['target_id'];
    }elseif (isset($getValue[0]['value']))  { //For simple text / date
      $value = $getValue[0]['value'];
    }else if(isset($getValue[0]['uri'])) {
      $value = $getValue[0]['uri'];
    }else { //other type of field

    }
  }
  return $value;
}


use Drupal\Core\Url;
use Drupal\Core\Routing\UrlGeneratorInterface;
use Symfony\Component\HttpFoundation\Request;

use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Core\StreamWrapper\StreamWrapperManager;
use Drupal\Component\Utility\Html;

// Implements hook_form_alter().
function phenix_custom_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  
  if (in_array($form['#form_id'], ['user_form', 'civicrm_user_profile'])) {
    $config = \Drupal::configFactory()->getEditable('phenix_custom_block.settings');
    $image_id = $config->get('image_field');
    if ($image_id) {
      $file = File::load($image_id);
      $file_uri = $file->getFileUri();
      $form['#attributes']['class'][] = 'user-form';
      $form['#attributes']['data-img-illustration'] = file_create_url($file_uri);
    }
  }
  // dump($form['#form_id']);

  if ($form['#form_id'] == 'taxonomy_term_rubrique_form') {
    if (isset ($form['field_dossier']['widget'][0]['subform']['field_document']['widget']['selection'])) {

    }
  }
  //Formulaire confirmation presence
  if (in_array($form['#form_id'], ['civicrm_participant_add_form', 'civicrm_participant_edit_form'])) {




    $form['actions']['submit']['#prefix'] = '<div class="custom_save_participant">';
    $form['actions']['submit']['#suffix'] = '</div>';
    if ($form['#form_id'] == 'civicrm_participant_edit_form') {
      $form['actions']['delete']['#prefix'] = '<div class="custom_delete_participant">';
      $form['actions']['delete']['#suffix'] = '</div>';
    }
  }

  if ($form['#form_id'] == 'webform_submission_poser_une_question_add_form') {
    $token = \Drupal::request()->query->get('token');
    \Drupal::service('session')->set('current_token', $token);
    $form['elements']['civicrm_1_activity_1_fieldset_fieldset']['civicrm_1_activity_1_activity_subject']['#attributes']['required'] = true;
  }

  //Page mot de passe oublié
  if ($form['#form_id'] == 'user_pass') {
    $form['actions']['#prefix'] = '<div class="btn-custom-submit">';
    $form['actions']['#suffix'] = '</div>';
    $form['actions']['submit']['#value'] = '';
  }

  $form['elements']['civicrm_1_activity_1_fieldset_fieldset']['civicrm_1_activity_1_activity_assignee_contact_id']['#options'] = [
    '3602' => 'Vanessa', 
    '3554' => 'Thomas Fayet', 
  ];

  $query = \Drupal::request()->query;
  if ($req = $query->get('group_id')) {
    $form['field_groupes']['widget']['#default_value'] = [$req];
  }
  if ($tag = $query->get('term_id')) {
    $form['field_tag']['widget']['#default_value'] = [$tag];
  }
  //Page d'authentification
  if ($form['#form_id'] == 'user_login_form') {
    $form['pass']['#title_display'] = 'invisible';
    $form['pass']['#placeholder'] = t('Mot de passe');
    $form['name']['#title_display'] = 'invisible';
    $form['name']['#placeholder'] = 'Identifiant';
    $form['name']['#attributes']['placeholder'] = 'Identifiant';
  }



  if ($form['#id'] == 'views-exposed-form-media-media-page-list') {
    $form['name']['#attributes']['data-session'] = \Drupal::service('session')->get('previous_url');
  }
  
  if (in_array($form['#id'], ['media-document-add-form', 'media-document-edit-form'])) {

    $previous_url = \Drupal::service('session')->set('previous_url', $_SERVER['HTTP_REFERER']);

    $form['#submit'][] = 'custom_media_alert_media_document_submit';

    $form['name']['widget'][0]['value']['#title'] = 'Nom (titre interne)';
    $form['#attributes']['class'][] = 'custom-add-and-edit-form';
    $form['status']['#prefix'] = '<div class="wrapper-status-and-author">';
    $form['author']['#suffix'] = '</div>';
    $form['field_type_de_document']['#prefix'] = '<div class="wrapper-doc-type">';
    $form['field_source']['#suffix'] = '</div>';
    $form['field_source']['widget']['#description'] = '';
    $form['field_filieres']['widget'][0]['value']['#group'] = 'first';
    // dump($form);
    $form['field_groupes']['widget']['#title'] = "Commissions";
    // dump($form['field_social']['widget']);
    /** Debut config filière */
    $menu_tree_service = \Drupal::service('menu.link_tree');
		$menu_parameters = new \Drupal\Core\Menu\MenuTreeParameters();
		$menu_parameters->setMaxDepth(1); // Profondeur du menu à afficher
		$menu_name = 'guide'; // Nom machine du menu à afficher
		$menuLoaded = $menu_tree_service->load($menu_name, $menu_parameters);
    
		foreach($menuLoaded as $key => $eachMenu) {
		  //Skip for menu 'Condition general and disabled menu
		  if (!$eachMenu->link->isEnabled() || ($eachMenu->link->getPluginId() == 'menu_link_content:f2ea2bf5-f176-4a63-83ba-4904c0312619')) {
			unset($menuLoaded[$key]);
		  }
		}

    \Drupal::service('civicrm')->initialize();
		$optionValues = \Civi\Api4\OptionValue::get(FALSE)
			->addSelect('id', 'label')
			->addWhere('option_group_id', '=', 163)
			->execute();

		$option = [];
		foreach ($optionValues as $key => $filiere) {
		  $option[$filiere['id']] = $filiere['label'];
		}
		asort($option);
    $defaultValue = '';
    if ($form['field_filieres']['widget'][0]['value']['#default_value']) {
      $defaultValue = $form['field_filieres']['widget'][0]['value']['#default_value'];
      $defaultValue = json_decode($defaultValue);
      $defaultValue = array_column($defaultValue, 'id');
    }
		$form['filiere'] = [
      '#type' => 'container',
      'widget' => [
        '#type' => 'checkboxes',
        '#options' => $option,
        '#title' => 'Filières',
        '#default_value' => $defaultValue,
        '#attributes' => ['class' => ['all-menu-checkboxes']]
      ],
      '#weight' => 6,
      '#group' => 'first',
	  ];
	  $form['filieres']['#group'] = 'first';
		$form['field_menu']['#attributes']['class'][] = 'hide hidden';  
    /** fin config filiere */


    $form['author']['#type'] = 'container';
    $form['author']['#group'] = 'first';
    $form['revision']['#group'] = 'second';
    $form['revision_information']['#group'] = 'second';
    $form['field_filieres']['widget']['#group'] = 'first';
    $form['actions']['submit']['#group'] = 'first';
    $form['revision_information']['#attributes']['class'][] = 'hidden';
    $form['revision_log_message']['#attributes']['class'][] = 'hidden';
    $form['field_extrait']['#attributes']['class'][] = 'hidden';

    //get option form 
    $all_option = $form['field_tag']['widget']['#options'];

    
    $form['field_media_document']['widget'][0]['#description'] = '<span class="only-one-file">1 seul fichier </span> | <span class="size-limit">Max 80 Mo</span>';
    $default_value_tags = $form['field_tag']['widget']['#default_value'];

    //remove commission from list 
    unset($all_option['6270']);
    $custom_service->NePasAfficherDansOption($all_option);
    
    
    $form['field_groupes']['#prefix'] = convertToNestedULWithCheckboxes($all_option, $default_value_tags);
    
    $curr_description = $form['field_media_document']['widget'][0]['#description'];
    $curr_description = str_replace('<br />', '', $curr_description);
    $form['field_media_document']['widget'][0]['#description'] = $curr_description;
    
    $form['field_groupes']['widget']['#description'] = '<a class="delete-all">Supprimer tout</a>';
    $form['actions']['submit']['#prefix'] = '<div class="div-parent-save">';
    $form['actions']['submit']['#suffix'] = '<i class="fas fa-save fa-inverse"></i></div>';
    if ($form['#id'] == 'media-document-edit-form') {
      $form['actions']['delete']['#prefix'] = '<div class="div-parent-delete">';
      $form['actions']['delete']['#suffix'] = '<i class="fas fa-trash-alt"></i></div>';
    }


    $default_value_tags = $form['field_tag']['widget']['#default_value'];
    $default_value_tags= implode(',', $default_value_tags);
    $form['field_tag']['#attributes']['data-default-value'] = $default_value_tags;


  }

  if ($form['#form_id'] == 'taxonomy_term_rubrique_form') {
    
  }

  if ($form['#form_id'] == 'civicrm_event_reunion_add_form') {
    $group_id = $query->get('group_id');
    $form['#access'] = true;
    $form['custom_179']['widget']['#default_value'] = $group_id;
  }
 
}



/**
 * Implements hook_taxonomy_term_presave().
 */
function phenix_custom_block_taxonomy_term_presave(\Drupal\taxonomy\TermInterface $term) {
  // Check if the custom field value is present in the submitted form values.
  if ($value = \Drupal::request()->request->get('test_field')) {
    // Save the custom field value to the term.
    $term->test_field->value = $value;
  }
}


/**
 * Convert a flat array into a nested array with UL/LI structure based on levels.
 *
 * @param array $items
 *   The flat array of items with levels indicated by '-'.
 * @return string
 *   The nested UL/LI structure.
 */
function convertToNestedULWithCheckboxes($items, $default_value) {
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  $result = '<div class="all-tag-dropdown"><p class="p-tag-arborescence"><strong>Tags / Arborescence</strong></p><ul class="custom-tag-dropdown">';
  $indentations = [0];
  unset($items['4966']);//ne pas afficher le checkbox pour accueil
  // unset($items['6273']);//ne pas afficher le checkbox pour "les filières"
  foreach ($items as $id => $item) {
    $indentation = 0;
    if (!hasRoleSocial() && isTermSocial($id)) {
      continue;
    } 
    while (substr($item, 0, 1) === '-') {
      $indentation++;
      $item = substr($item, 1);
    }
    while ($indentation < end($indentations)) {
      $result .= "</li></ul>";
      array_pop($indentations);
    }
    
    if ($indentation > end($indentations)) {
      $result .= "<ul>";
      array_push($indentations, $indentation);
    } else {
      $result .= "</li>";
    }
    $itemText = trim(str_replace('-', '', $item));
    $checked = in_array($id, $default_value) ? ' checked' : '';
    //check if term has children
    $class_has_child = $custom_service->hasChildren($id) || $custom_service->isRubriqueWithTxtAndImg($id) ? ' term-who-had-child' : ' term-don-t-have-child';
    $result .= '<li class="ifhas ' . $class_has_child . '" data-current-id="' . $id . '">
    <span class="fancytree-node fancytree-expanded fancytree-has-children fancytree-exp-e fancytree-ico-e">
    <span class="fancytree-expander"></span>
    <span class="fancytree-checkbox ' . $checked . '"></span>
    <span class="fancytree-title">' . $itemText . '</span></span>';
  }
  
  $result .= str_repeat("</li></ul>", count($indentations) - 1) . "</li></ul></div>";
  
  return $result;
}

function hasRoleSocial() {
  // Get the current user object.
  $current_user = \Drupal::currentUser();
  $user = \Drupal\user\Entity\User::load($current_user->id());

  // Get an array of role IDs for the current user.
  $user_roles = $current_user->getRoles();
  $is_admin = $user->hasRole('administrator');

  return in_array('social', $user_roles) || $is_admin;
}

function isTermSocial ($termId) {
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  $term = Term::load($termId);
  return $custom_service->getNodeFieldValue($term, 'field_social');
}

use Drupal\views\Plugin\views\area\Text;

/**
 * Implements hook_views_pre_render().
 * Permet d'ajouter du lien  en bas de la vue s'il y a plus de 3 réunions 
 */
function phenix_custom_block_views_pre_render(\Drupal\views\ViewExecutable $view) {
  // Check if the view is the one you want to target.
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  if ($view->id() == 'civi_groupe_evenements') {
    $group_id = $view->args[0];
    
    if ( $view->current_display != 'page_4') {
      if ($view->footer['area']) {
        if (count($view->result) > 2) {
          $view->footer['area']->options['content']['value'] = "<a href='/toutes-les-reunions-a-venir/" . $group_id . "' class='link-to-meeting-page'>Voir + </a>";
        }
      }
    }
    if(in_array($view->current_display, ['page_4', 'page_2'])) {
      $view->footer['area']->options['content']['value'] = "<a href='/civicrm-group/" . $group_id . "' class='link-to-meeting-page'>⇠ Retour vers la page du groupe</a>";
    }
  } 
  if ($view->id() == 'civi_groupe_membres') {
    $view->build_info['title'] = '<p class="test">Référents</div>';
  }

  if ($view->id() == 'civievents_base_sur_le_contact_' && $view->current_display == 'block_7') {
    $notAdherentOrSocial = $custom_service->notAdherentOrSocial();
    if (!$notAdherentOrSocial) {
      $new_title = 'Les réunions';
      $view->setTitle($new_title);
      
    }
  }
  if ($view->id() == 'civievents_base_sur_le_contact_' && $view->current_display == 'block_5') {
    $notAdherentOrSocial = $custom_service->notAdherentOrSocial();
    if (!$notAdherentOrSocial) {
      $new_title = 'Tous mes groupes';
      $view->setTitle($new_title);
    }
  }
}



/**
 * Implements hook_preprocess_views_view().
 */
function phenix_custom_block_preprocess_views_view(array &$variables) {
  // Check if the view is the one you want to target.
  $view = $variables['view'];
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  if ($variables['view']->id() == 'civievents_base_sur_le_contact_' && $variables['view']->current_display == 'block_5') {

    if (!empty($variables['header'])) {
      if (!in_array('admin_client', $user_roles) && (!in_array('super_utilisateur', $user_roles) && !in_array('permanent', $user_roles) && !in_array('administrator', $user_roles))) {
        $isAdherent = true;
        $variables['header']['area']['#text'] = '<h2><i class="fas fa-users-cog"></i> Tous Les groupes </h2>';
      }
    }
  }
  if ($variables['view']->id() == 'rechercher' && $variables['view']->current_display == 'page_1') {
    $custom_service->addTitleToViewSearch($variables);
  }

  if (isset($variables['field'])) {

    $field = $variables['field'];
    $requests = \Drupal::request();
    $row = $variables['row'];
    


    if ($variables['view']->id() == 'civi_groupe_evenements') {
      $variables['attached_markup'] = '<div class="custom-markup">Your custom markup goes here.</div>';
      // Add classes and IDs to the main view container.
      $variables['attributes']['class'][] = 'civi_groupe_evenements_class';
    }
  }

  /* if ($variables['view']->id() == 'rechercher') {
    $field = $field->field;
    $variables['view']->result[0]->_entity
  } */
  
}

/**
 * Implements hook_views_pre_view().
 */
function phenix_custom_block_views_pre_view(\Drupal\views\ViewExecutable $view, $display_id, array &$args) {
  // Check if this is the view where you want to add a header.
  if ($view->id() == 'civi_groupe_evenements' && $display_id == 'page_2') {


  }
}



/**
 * 
 */
function phenix_custom_block_civicrm_group_access($entity, $operation, $account) {
  $current_path = \Drupal::service('path.current')->getPath();
  
  if ($entity->getEntityType()->get('id') == 'civicrm_group' && (strpos($current_path, '/civicrm-group/') !== false)) {
    return Drupal\Core\Access\AccessResult::allowed();
  }
  // return Drupal\Core\Access\AccessResult::allowed();
  // if ($entity->getEntityType() === 'node' && $operation === 'view') {
  //   // Implement your custom access logic here.
  //   if ($account->hasPermission('custom_permission')) {
  //   }
  // }

  // // Return appropriate access results.
  // return AccessResult::neutral();
}


/**
 * Implements hook_views_query_alter().
 */
function phenix_custom_block_views_query_alter(\Drupal\views\ViewExecutable $view, \Drupal\views\Plugin\views\query\QueryPluginBase $query) {
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  $email = $current_user->getEmail();
  // You can now use $email for further processing.
  $cid = $custom_service->getContactIdByEmail($email);
  
  
  //Search API
  if ($view->storage->get('id') == 'rechercher' && $view->current_display == 'page_1') {
    $index = \Drupal::entityTypeManager()->getStorage('search_api_index')->load('contenu');
    
    //Recuperation des groupes auxquel l'user est membre 
    $groupContacts = \Civi\Api4\GroupContact::get(FALSE)
    ->addSelect('group_id')
    ->addWhere('contact_id', '=', $cid)
    ->addWhere('group_id.group_type', 'LIKE', '%3%')
    ->addWhere('group_id.is_active', '=', TRUE)
    ->execute()->getIterator();
    
    $groupContacts = iterator_to_array($groupContacts);
    $groupContacts = array_column($groupContacts, 'group_id'); 
    
    if (in_array('adherent', $user_roles)) {
      $blackListGroupId = $custom_service-> getAllGroupIdWhereUserDoesntBelongAndGroupIsAfficherSurExtranet ($cid, $groupContacts);
      $query->addCondition('field_groupes',  $blackListGroupId,"NOT IN");
      //$fields = $index->getFields();
    }
  }

  if ($view->storage->get('id') == 'civievents_base_sur_le_contact_' && $view->current_display == 'block_7') {//VUE REUNION
    if ((!in_array('super_utilisateur', $user_roles) && !in_array('admin_client', $user_roles) && !in_array('permanent', $user_roles) && !in_array('administrator', $user_roles))) {
      $custom_service->filterMeetByContactId ($query, $cid);
    }
  }
  
    if ($view->storage->get('id') == 'civievents_base_sur_le_contact_' && $view->current_display == 'block_5') {//VUE MES GROUPES
      // Check if the user is authenticated (logged in).
      if ($current_user->isAuthenticated()) {
          // Get the email address of the current user.
          
          if ((in_array('super_utilisateur', $user_roles) || in_array('admin_client', $user_roles) || in_array('permanent', $user_roles) || in_array('administrator', $user_roles))
          ) {
            $custom_service->filterByGroupAdded ($query, $cid);
          }else if (in_array('adherent', $user_roles) || in_array('animateur', $user_roles) || in_array('social', $user_roles) || in_array('adherent_sans_communications', $user_roles)) {
            $custom_service->filterByContactId ($query, $cid);
          }
        }
    }
    }




/**
 * Implements hook_webform_submission_insert().
 */
function phenix_custom_block_webform_submission_insert($webform_submission) {
  // Perform custom actions here after the submission is inserted into the database.
  // You can access submission data using $webform_submission->getData().
}

/**
 * Implements hook_webform_submission_presave().
 */
function phenix_custom_block_webform_submission_presave(Drupal\webform\WebformSubmissionInterface $webform_submission) {
  $custom_service = \Drupal::service('phenix_custom_block.view_services');
  // Perform actions or manipulate data before the webform submission is saved.
  // For example, you can access and modify the submission values using:
  // $webform_submission->setDataValue('field_name', 'new value');
  $webform = $webform_submission->getWebform();
  
  $data = $webform_submission->getData();
  if ($webform->id() == 'poser_une_question') {
    $question_category = $data['civicrm_1_activity_1_cg30_custom_166'];
    $current_contact = \Drupal::request()->query->get('cid2');
    $assignee_to = 3602;
    $employer_id = \Civi\Api4\Contact::get(FALSE)
      ->selectRowCount()
      ->addSelect('employer_id')
      ->addWhere('id', '=', $current_contact)
      ->execute()->first()['employer_id'];
    $subject = $data['civicrm_1_activity_1_activity_subject'];
    $the_question = $data['civicrm_1_activity_1_activity_details']['value'];
    $infos = [
      'employer' => $employer_id ? $employer_id : $current_contact,
      'subject' => $subject,
      'the_question' => $the_question,
      'assignee_to' => $assignee_to,
      'question_category' => $question_category,
      
    ];

    // $custom_service->createActivity($infos);
  }
}

